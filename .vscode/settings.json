{
    "files.associations": {
        "*.html": "html",
        "*.cu": "cpp",
        "functional": "cpp",
        "deque": "cpp",
        "string": "cpp",
        "vector": "cpp",
        "rope": "cpp",
        "*.ipp": "cpp",
        "type_traits": "cpp",
        "array": "cpp",
        "*.tcc": "cpp",
        "unordered_map": "cpp",
        "unordered_set": "cpp",
        "memory": "cpp",
        "optional": "cpp",
        "string_view": "cpp",
        "hash_map": "cpp",
        "hash_set": "cpp",
        "slist": "cpp",
        "fstream": "cpp",
        "future": "cpp",
        "istream": "cpp",
        "ostream": "cpp",
        "sstream": "cpp",
        "streambuf": "cpp",
        "thread": "cpp",
        "tuple": "cpp",
        "valarray": "cpp",
        "variant": "cpp",
        "typeindex": "cpp",
        "typeinfo": "cpp",
        "any": "cpp",
        "atomic": "cpp",
        "strstream": "cpp",
        "bit": "cpp",
        "bitset": "cpp",
        "cctype": "cpp",
        "chrono": "cpp",
        "cinttypes": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "codecvt": "cpp",
        "complex": "cpp",
        "condition_variable": "cpp",
        "csetjmp": "cpp",
        "csignal": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "forward_list": "cpp",
        "list": "cpp",
        "map": "cpp",
        "set": "cpp",
        "exception": "cpp",
        "algorithm": "cpp",
        "iterator": "cpp",
        "memory_resource": "cpp",
        "numeric": "cpp",
        "propagate_const": "cpp",
        "random": "cpp",
        "ratio": "cpp",
        "regex": "cpp",
        "source_location": "cpp",
        "system_error": "cpp",
        "utility": "cpp",
        "initializer_list": "cpp",
        "iomanip": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "limits": "cpp",
        "mutex": "cpp",
        "new": "cpp",
        "scoped_allocator": "cpp",
        "shared_mutex": "cpp",
        "stdexcept": "cpp",
        "cfenv": "cpp",
        "__nullptr": "cpp",
        "span": "cpp",
        "alignedvector3": "cpp",
        "ucp.h": "c",
        "__functional_base": "cpp",
        "locale": "cpp",
        "*.inc": "cpp",
        "cholmodsupport": "cpp",
        "__config": "cpp"
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
        "**/.hg/store/**": true,
        "**/.cache/**": true,
    },
    "[cpp]": {
        "editor.wordBasedSuggestions": false,
        "editor.suggest.insertMode": "replace",
        "editor.semanticHighlighting.enabled": true,
        "editor.tabSize": 4,
        "editor.detectIndentation": false,
        "editor.wordWrapColumn": 120,
        "editor.formatOnSave": true,
    },
    "[cmake]": {
        "editor.tabSize": 2,
    },
    "[python]": {
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        },
        "editor.formatOnSave": true,
        "editor.rulers": [
            120
        ],
        "editor.tabSize": 4
    },
    "python.analysis.extraPaths": [
        "python"
    ],
    "python.autoComplete.extraPaths": [
        "./python"
    ],
    "testMate.cpp.debug.configTemplate": {
        "type": "cppvsdbg",
        "linux": {
            "type": "cppdbg",
            "MIMode": "gdb",
            "symbolLoadInfo": {
                "loadAll": false,
                "exceptionList": "*libsrf*.so"
            },
        },
        "darwin": {
            "type": "cppdbg",
            "MIMode": "lldb"
        },
        "win32": {
            "type": "cppvsdbg"
        },
        "program": "${exec}",
        "args": "${argsArray}",
        "cwd": "${cwd}",
        "env": "${envObj}",
        "environment": "${envObjArray}",
        "sourceFileMap": "${sourceFileMapObj}",
        "setupCommands": [
            {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
            },
            // {
            //     "description": "Set GLOG_v Environment Variable",
            //     "text": "-interpreter-exec console \"set environment GLOG_v=10\""
            // },
            {
                "description": "Skip stdio-common files",
                "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
            },
            // {
            //     "description": "Stay on same thread when debugging",
            //     "text": "-interpreter-exec console \"set scheduler-locking step\""
            // }
        ],
        "testMate.cpp.debug.setEnv": {
            "GLOG_v": "10",
            "GTEST_CATCH_EXCEPTIONS": "0", // Allow the debugger to catch exceptions
            "UCX_ERROR_SIGNALS": "", // Prevent UCX from capturing errors
        }
    },
    "cmake.configureArgs": [
        "-DCMAKE_MESSAGE_CONTEXT_SHOW:BOOL=ON", // Show message context by default
        "-DSRF_USE_CLANG_TIDY:BOOL=OFF", // If we are using clangd extension, disable clang-tidy in VS Code to prevent double errors
        "-DSRF_PYTHON_INPLACE_BUILD:BOOL=ON", // Allow inplace build for python. Use `pip install -e .` from the python folder to install
    ],
    "C_Cpp.files.exclude": {
        "**/.vscode": true,
        "**/vcpkg_installed": true,
    },
    "python.testing.cwd": "${workspaceFolder}/python",
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "python.testing.pytestArgs": [
        "-s"
    ],
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "python.formatting.provider": "yapf",
    "python.formatting.yapfArgs": [
        "--style=${workspaceFolder}/python/setup.cfg",
    ],
    "python.linting.flake8Enabled": true,
    "python.linting.flake8Args": [
        "--config=${workspaceFolder}/python/setup.cfg",
    ],
    "python.linting.pylintArgs": [
        "--rcfile=${workspaceFolder}/python/.pylintrc",
    ],
    "python.linting.pylintEnabled": true,
    "testMate.cpp.log.logpanel": true,
    "testMate.cpp.test.executables": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}_*.x",
}
